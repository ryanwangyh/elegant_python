import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.ui import Select

## For Image comparison
from PIL import Image, ImageDraw
import os
import math

## For exception
from selenium.common.exceptions import WebDriverException
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import StaleElementReferenceException

## For randomization
import random
import string


from selenium.webdriver.chrome.options import Options



##  For testing file name
import datetime
import time

## For data analysis
import pandas as pd
import matplotlib


pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)
pd.set_option('display.column_space', 20)


## For GUI control and config
from tkinter import Tk, Label, Button, Radiobutton, IntVar
from tkinter.ttk import *
import sys
from tkinter import ttk, font

##################################################################################
##
##  This is the common class which will be inherited  by other specific child classes
##
##################################################################################

class testing_config_utility():
    
    global text_info
    global driver
    global campsite_name
    global check_in_date
    global check_out_date
    global country_name
    global sort_criteria
    global filter_criteria
    global search_from_page ## variable to control the search is from where, three options: "home", "results" and "details" 
    
    def __init__(self, url, browser):
        self.url = url
        self.browser = browser

    ## Config the browser
    def web_driver_config(self):      
        global driver
        if (self.browser == 'Chrome'):
            driver = webdriver.Chrome(r'C:\Users\yanhui\AppData\Local\Programs\Python\Python36\Scripts\chromedriver.exe')
        driver.get(self.url)
        driver.maximize_window()
        time.sleep(2)

    ## Utility for partial-link-text-based-button
    def pltb_button_click(text_info):
        pltb_button_element = driver.find_element_by_partial_link_text(text_info)
        pltb_button_element.click()
        time.sleep(2)
        print('TESTING PASSED :  "{info}" is done successfully.....' .format(info = text_info))
    
    ## Utility for social-icon-based-button
    def social_icon_click(self):
        social_icon_list = driver.find_elements_by_xpath("//*[contains(@class, 'social-icon')]")
        for social_icon in social_icon_list:
            try:
                #print(social_icon.get_attribute('title'))
                text_info = social_icon.get_attribute('title')
                print('TESTING PASSED : "{info}" is done successfully.....' .format(info = text_info))
                social_icon.click()
                time.sleep(2)
                driver.back()
            except StaleElementReferenceException:
                #print ('Currently mail function in social icon checking will be ignored......')
                driver.switch_to.window(driver.window_handles[0])
                continue
                
    ## Common Search based on specific campsite and date
    def common_search_specific_campsite(campsite_name, check_in_date, check_out_date, search_from_page):
        ##  Maximize the window of the page
        #driver.maximize_window()
        ## Fill in check-in date
        date_check_in_field = driver.find_element_by_name("csf[date_from]")
        driver.execute_script("arguments[0].type='text'",date_check_in_field)
        driver.find_element_by_name("csf[date_from]").send_keys(check_in_date)

        ## Fill in check-out date
        date_check_out_field = driver.find_element_by_name("csf[date_to]")
        driver.execute_script("arguments[0].type='text'",date_check_out_field)
        driver.find_element_by_name("csf[date_to]").send_keys(check_out_date)

        if (search_from_page == "home"):
            ## Fill in specific campsite name
            elem = driver.find_element_by_name("csf[query]")
            elem.clear()
            elem.send_keys(campsite_name)
            elem.send_keys(Keys.RETURN)
    
    ## Common Search based on specifc country card, the entrance should be from home page
    def common_search_country_card(country_name):
        ##  Maximize the window of the page
        driver.maximize_window()
        country_list = driver.find_elements_by_xpath("//*[contains(@class, 'country-card country-card-link')]")
        for country in country_list:
            country_name_tmp = country.get_attribute('title')
            if (country_name_tmp == country_name):
                #print ('Finding the country user defined......')
                country.click() ## to specific results page
                #driver.switch_to.window(driver.window_handles[0]) ## switch main tab (home page) to click next one
    
    ## Automation for 3 Steps based booking flow, and the payment step is not included
    def booking_flow(self):
        ## The precondition is use has done the checking of availability for accommodations in details page
        
        ## Click "Book now" with available accommodation to enter step 1
        try:
            button_book_now = driver.find_element_by_xpath("//*[contains(@class, 'campsite-availability__cta')]")  
            driver.execute_script("arguments[0].click();", button_book_now)
            time.sleep(15)
        
            ## Clicking extras in step 1
            elems_add = driver.find_elements_by_xpath("//*[contains(@class, 'btn-plus')]")
            for elem in elems_add:
                elem.click()
                time.sleep(2)

            elems_minus = driver.find_elements_by_xpath("//*[contains(@class, 'btn-minus')]")
            for elem in elems_minus:
                elem.click()
                time.sleep(2)

            ##  Click "Next" to enter step 2
            next_button_in_step1 = driver.find_element_by_xpath("//*[contains(@class, 'request-to-book')]")  
            next_button_in_step1.click()
            #time.sleep(2)

            print('                Step 1 : Done successfully.')
            time.sleep(5)
        
            ## Extract the filed info in source code of step 2l
            booking_input_items = driver.find_elements_by_xpath("//*[contains(@class, 'bookings__input')]")

            ## Following fixed info will be used to fill in the fileds, other fileds will be filled with random info
            country = "France"
            mail_address = "super@163.com"
            brith_date = "11111980"
            phone_number = "12345"
        
            input_item_list = [] ## This list is for debugging purpose
            for input_item in booking_input_items:
                item_name = input_item.get_attribute('name')
                temp_name = item_name.split('personal_information_form')[1][:-1][1:]
                input_item_list.append(item_name)

                # random value will be generated and used for some fileds
                random_value = ''.join([random.choice(string.ascii_lowercase) for n in range(8)])
    
                elem = driver.find_element_by_name(item_name)
                if (temp_name == "first_name" or temp_name == "last_name" or temp_name == "address" or temp_name == "city" or \
                    temp_name == "zip" or temp_name == "special_requests"):
                    elem.send_keys(random_value)
                else:
                    if (temp_name == "country"):
                        elem.send_keys(country)
                    elif (temp_name == "email"):
                        elem.send_keys(mail_address)
                    elif (temp_name == "email_confirmation"):
                        elem.send_keys(mail_address)
                    elif (temp_name == "birthdate" or temp_name == "additional_persons_birthdays]["):
                        elem.send_keys(brith_date)
                    elif (temp_name == "phone"):
                        elem.send_keys(phone_number)
                    else:
                        elem.send_keys(random_value)
            
            # Clicking "go to final step" to enter Step 3

            next_button_in_step2 = driver.find_element_by_xpath("//*[contains(@class, 'campsites-wishlist__item-btn')]")  
            next_button_in_step2.click()
            print('                Step 2 : Done successfully.')
            
            time.sleep(15)     
            print('                Step 3 : Done successfully. (fake step.....)')
            print("        TESTING PASSED: Run through whole booking flow..... \n ")
        except NoSuchElementException:
            #print("     TESTING PENDED: No availability between {start_time} and {end_time}..... \n " .format(start_time = check_in_date, end_time = check_out_date))
            print("     TESTING PENDED: No availability..... \n ")


    ## Sorting function (in Results page)    
    def specific_sort(self, sort_criteria):
        ## Do the sorting based on results pages
        ## Step 1 :  Click the button of sort 
        sort_buttion = driver.find_element_by_id('sort-select')
        sort_buttion.click()

        ## Step 2: Click user defined criteria to do the sorting
        sort_option = driver.find_element_by_link_text(sort_criteria)
        sort_option.click()
        
    ## Filter function (in Results Page)
    def specific_filter(self, filter_criteria):
        ##  Open the Filter checkbox
        filter_button = driver.find_element_by_xpath("//*[contains(@class, 'icon-filter')]")
        filter_button.click()
        time.sleep(2)
        
        filter_checkbox_list = driver.find_elements_by_xpath("//*[contains(@class, 'main-checkbox__icon')]")

        #  default filter criteria:  select the accomodation type "Pitch"  and other conditions for filtering
        if (filter_criteria == 'default_filter'):
            filter_checkbox_list[1].click() ## Pitch locates at the second one in the list, so "[1]"  is assigned to it ("[0"] means the first one)
            filter_checkbox_list[3].click() ## "[3]" means "2 stars"
            filter_checkbox_list[4].click() ## "[4]" means "3 stars"
            filter_checkbox_list[5].click() ## "[5]" means "4 stars"
        else:
            filter_checkbox_list[8].click() ## "[8]" means "restaurant"
            
        time.sleep(2)

        ## Apply the filtering to get the results expected
        apply_filter_buttion = driver.find_element_by_id("apply-filter")
        apply_filter_buttion.click()



##################################################################################
##
##  Following are for specific website functional classes
##
##################################################################################
        
## This is for common Navbar testing
class campsited_common_navbar(testing_config_utility):
    def __init__(self, url, browser):
        super(campsited_common_navbar, self).__init__(url, browser)
        self.url = url
        self.browser = browser
        
    def button_click(self):
        button_list = ['About us', 'FAQs', 'My Booking', 'Site sign in', 'My wish list']
        
        for button in button_list:            
            if (button != 'My wish list'):
                campsited_common_navbar.pltb_button_click(button)
                driver.back()
            else: 
                try:
                    campsited_common_navbar.pltb_button_click('My wish list')
                    print('TESTING PASSED :  "My wish list" is done successfully.....')
                    driver.back()
                except WebDriverException:
                    print ('TESTING PENDED  ： "My wish list" is not clickable, No campsite added by user....')

## This is for common Footer testing 
class campsited_common_footer(testing_config_utility):
    def __init__(self, url, browser):
        super(campsited_common_footer, self).__init__(url, browser)
        self.url = url
        self.browser = browser
        
    def button_click(self):
        button_list = ['About us', 'Blog', 'Privacy Policy', 'Customer Terms', 'Park Terms', 'Cookie Policy']
        
        for button in button_list:
            campsited_common_navbar.pltb_button_click(button)
            driver.back()
                    
## This is for General searching 
class campsited_common_search(testing_config_utility):
    def __init__(self, url, browser, campsite_name, check_in_date, check_out_date):
        super(campsited_common_search, self).__init__(url, browser)
        self.url = url
        self.browser = browser 
        self.campsite_name = campsite_name
        self.check_in_date = check_in_date
        self.check_out_date = check_out_date
    
    def specific_campsite(self):
        campsited_common_search.web_driver_config(self)
        campsited_common_search.common_search_specific_campsite(self.campsite_name, self.check_in_date, self.check_out_date, "home")
        time.sleep(15)
        
        ## Click "Availability" at details page to check the accommodation
        availability_button = driver.find_element_by_partial_link_text('Availability')
        availability_button.click()
        time.sleep(5)

## Country card clicking (from home page)
class country_card_clicking(testing_config_utility):
    def __init__(self, url, browser, country_name, country_flag):
        super(country_card_clicking, self).__init__(url, browser)
        self.url = url
        self.browser = browser
        self.country_name = country_name
        self.country_flag = country_flag
    
    def specific_country_card(self):
        country_card_clicking.web_driver_config(self)
        if (self.country_flag == "Yes"):
            country_card_clicking.common_search_country_card(self.country_name)
        else: ## Following is for specific area based entry from home page
            elem = driver.find_element_by_name("csf[query]")
            elem.clear()
            elem.send_keys(self.country_name)
            elem.send_keys(Keys.RETURN)
        time.sleep(5)

##  Theme cark booking (from home page to details page)
class theme_card_booking(testing_config_utility):
    def __init__(self, url, browser, theme_candidate):
        super(theme_card_booking, self).__init__(url, browser)
        self.url = url
        self.browser = browser
        self.theme_candidate = theme_candidate
    
    def specific_theme_card(self):
        theme_card_booking.web_driver_config(self)
        driver.maximize_window()

        check_in_date = '02/09/18'
        check_out_date = '03/09/18'
        ## all of the countries and campsites in the themes will be caught and mixed into this list
        mixed_web_elem_list = driver.find_elements_by_xpath("//*[contains(@class, 'country-card-link')]")

        sites_num = 0
        for campsite in mixed_web_elem_list:
            campsite_name = campsite.get_attribute('title')
            ## "sites_num > 15" is to filter out the countries
            ## "sites_num % 2 == 0" is to make sure no repeating for one specific campsite
            ##  little tricky here.......
            if (sites_num > 15 and sites_num % 2 == 0):
                ## theme_candidate is a number assigned by user, which should be larger than 15
                if (sites_num == self.theme_candidate):
                    print('Campsite < {name} > is selected from theme card for booking flow testing between {s_date}  and {e_date}' .format(name = campsite_name, s_date = check_in_date, e_date = check_out_date))
                    campsite.click()

            sites_num = sites_num + 1

        driver.switch_to.window(driver.window_handles[-1])
        theme_card_booking.common_search_specific_campsite("", check_in_date, check_out_date, "details")
        time.sleep(5)

        availability_button = driver.find_element_by_class_name('campsite-overview__panel-btn')
        availability_button.click()
        #print('                2) Done to check availability.')
        time.sleep(15)
        theme_card_booking.booking_flow(self)


## Campsite cark based booking (Tree tabs: Home page -----> Results page -----> Details page)
class country_card_booking(country_card_clicking):
    def __init__(self, url, browser, country_name, availab_only, country_flag):
        #uper(country_card_booking, self).__init__(url, browser)
        self.url = url
        self.browser = browser
        self.country_name = country_name
        self.availab_only = availab_only
        self.country_flag = country_flag

    
    ############
    ## This will be tricky for this loop, since driver will be out of control after each booking is done, so 
    ##  1) A new initialization is needed for a new campsite booking
    ##  2) In each new initialization, driver and URL should be changed to original 
    ##  3) Each loop mapped with a new campsite (i = 0 means the first campsite, i=1 means the second campsite)
    ############
    def campsites_cards_run(self):
        global driver
        time.sleep(5)
        ## click the country card from home page
        #country_card_booking.web_driver_config()
        country_card_booking.specific_country_card(self)        
        driver.switch_to.window(driver.window_handles[-1])
        
        time.sleep(10)

        check_in_date = '02/09/18'
        check_out_date = '03/09/18'

        #site_number = len(driver.find_elements_by_xpath("//*[contains(@class, 'js-card-data')]"))
        ## Get the totoal number of campsites in the first page

        #elem = driver.find_element_by_class_name('search-results__cards-title')
        #site_number_html = elem.get_attribute('innerHTML')
        #site_number = int(site_number_html.split('-')[1].split('<')[0])
        #if ('-' in site_number_html):
        #    site_number = int(site_number_html.split('-')[1].split('<')[0])
        #else:
        #    site_number = int(site_number_html.split('>')[1].split('<')[0])

        site_number = 2

        print('Totally {number} campsites will be tested in {country} between {s_date} and {e_date}\n ' .format (number = site_number, country = self.country_name, s_date = check_in_date, e_date = check_out_date))

        #print ('debug 3 ..........')
        for i in range(site_number):
            ## After the first loop, the whole browser will be closed, so for the rest of loop, the initialization is needed. 
            if (i > 0):
                country_card_booking.specific_country_card(self)        
                driver.switch_to.window(driver.window_handles[-1])
                
            ## Get the campsites list
            campsite_web_elem_list = driver.find_elements_by_xpath("//*[contains(@class, 'js-card-data')]")
            #print(campsite_web_elem_list.get_attribute('innerHTML'))
            active_campsite = campsite_web_elem_list[i]
            #print(active_campsite.get_attribute('innerHTML'))
            active_campsite_name = active_campsite.get_attribute('data-name')
            print("No.{number} : Campsite Name: {name}" .format(number = i, name = active_campsite_name))
    
            ## Trick: ActionChains tech is used here because of the blocking of small-popup window related cookies(GDPR)
            action = webdriver.common.action_chains.ActionChains(driver)
            action.move_to_element_with_offset(active_campsite, 350, 0) # move click point to more right (positive x value 350), and keep the same height(no change for y value 0)
            action.click()
            action.perform()

            ## Currently there are three tabs here, home page, country results page, and campsite details page (this is the destination) 
            driver.switch_to.window(driver.window_handles[-1])
            time.sleep(5)
            
            country_card_booking.common_search_specific_campsite("", check_in_date, check_out_date, "details")
            #print('				1) Done to fill date.')
            
            time.sleep(5)
            availability_button = driver.find_element_by_class_name('campsite-overview__panel-btn')
            availability_button.click()
            #print('				2) Done to check availability.')
            time.sleep(15)

            #country_card_booking.booking_flow(self)
            

            if (self.availab_only == True):
                print("				Campsite {name} availability checking is done....\n " .format(name = active_campsite_name))
                driver.quit()
            else:
                country_card_booking.booking_flow(self)
                driver.quit()

## check campsite info (Prices, pictures, etc), which start is from home page and end at results page
class country_based_campsite_info_checking(country_card_clicking):
    def __init__(self, url, browser, country_name, country_flag):
        self.url = url
        self.browser = browser
        self.country_name = country_name
        self.country_flag = country_flag

    ## from home page
    def country_check(self):
        global driver
        #driver.web_driver_config(self)
        #time.sleep(10)
        country_based_campsite_info_checking.web_driver_config(self)

        country_list = []
        country_elems = driver.find_elements_by_xpath("//*[contains(@class, 'country-card__info-title')]")

        for elem in country_elems:
            country_name = elem.get_attribute('innerHTML')
            country_list.append(country_name.replace('\n', ''))

        number_list = []
        number_elems = driver.find_elements_by_xpath("//*[contains(@class, 'country-card__info-text')]")

        for elem in number_elems:
            number_name = elem.get_attribute('innerHTML')
            number_list.append(number_name.replace('\n', '').replace('campsites', ''))

        country_df = pd.DataFrame(list(zip(country_list, number_list)), 
                                columns=['Country Name', 'Campsite number'])

        print("#################################################################")
        print("##### Mapping between Country and Campsites number")
        print("#################################################################")

        print('\n')
        print(country_df)
        print('\n')
        driver.quit()

    def price_dump(self):
        global driver
        global whole_df_price

        print("#################################################################")
        print("##### Campsite Price in Country : {c_name}".format(c_name = self.country_name))
        print("#################################################################")
        print('\n')

        time.sleep(5)
        ## click the country card from home page
        #country_card_booking.web_driver_config()
        country_card_booking.specific_country_card(self)        
        driver.switch_to.window(driver.window_handles[-1])

        # Pre defined value to make sure the loop of "while" can be initialized
        campsite_web_next_page = "pre_defined"

        page_counter = 1
        while (campsite_web_next_page != None):
            try:
                ## Get the campsite web list
                campsite_web_elem_list = driver.find_elements_by_xpath("//*[contains(@class, 'js-card-data')]")
        
                ## Define the lists for campsite name/pitch/rental prices
                campsite_min_price_rental_list = []
                campsite_min_price_pitch_list = []
                campsite_name_list = []

                ## Get the detailed prices info and name, then put into the corresponding lists
                for campsite in campsite_web_elem_list:
                    campsite_min_price_rental_list.append(campsite.get_attribute('data-fixed-min-price'))
                    campsite_min_price_pitch_list.append(campsite.get_attribute('data-pitch-min-price'))
                    campsite_name_list.append(campsite.get_attribute('data-name'))
        
                ##  Temp DF for each page
                page_df = pd.DataFrame(list(zip(campsite_name_list, campsite_min_price_pitch_list ,campsite_min_price_rental_list)), 
                                columns=['Campsite Name', 'Pitch Price', 'Rental Price'])
        
                if (page_counter ==1): ## Only 1 page and No need to merge dataframes
                    whole_df_price = page_df
                else: ##  More than 1 page and need merge dataframes
                    whole_df_price = whole_df_price.append(page_df, ignore_index=True)
                    
                time.sleep(15)
                page_counter = page_counter + 1
                # Click the button to next page
                campsite_web_next_page = driver.find_element_by_class_name("next")
                campsite_web_next_page.click()
                # Switch the page got after clicking to current URL for next action
                driver.current_url
            except NoSuchElementException:
                #print ("This is the last page for this country")
                campsite_web_next_page = None
        else:
            driver.quit()

        print(whole_df_price)
        print('\n')

    def price_check(self):
        zero_price_df = whole_df_price.loc[(whole_df_price['Pitch Price'] == "€0.00") | (whole_df_price['Rental Price'] == "€0.00")]
        if (zero_price_df.shape[0] > 0):
            print("TESTING FAILED: Zero price is found in following campsites: ")
            print(zero_price_df['Campsite Name'])
            print("\n")
        else:
            print("TESTING PASSED: No Zero price in campsites")
            print("\n")





##################################################################################
##
##  Following are for website snapshot comparison based checking methods
##
##################################################################################

class screen_analysis():

    global target_page_snapshot
    
    def __init__(self, browser, url, reference_page_snapshot, output_path):
        self.browser = browser
        self.url = url
        self.reference_page_snapshot = reference_page_snapshot
        self.output_path = output_path
    
    ## Get the time for each testing which will be used inside file name as flag
    def current_time_formated(self):
        ts = time.time()
        timestamp_formated = datetime.datetime.fromtimestamp(ts).strftime('%Y_%m_%d_%H_%M_%S')
        return(timestamp_formated)
    
        ## Config the browser
    def web_driver_config(self):      
        global driver
        if (self.browser == 'Chrome'):
            driver = webdriver.Chrome(r'C:\Users\yanhui\AppData\Local\Programs\Python\Python36\Scripts\chromedriver.exe')
        driver.get(self.url)
        driver.maximize_window()
        time.sleep(15)
        
    def whole_page_snapshot(self):
        #driver.get(url)
        #driver.maximize_window()
         #time.sleep(15)

        ## get dimensions
        window_height = driver.execute_script('return window.innerHeight')
        scroll_height = driver.execute_script('return document.body.parentNode.scrollHeight')
        num = int( math.ceil( float(scroll_height) / float(window_height) ) )

        ## Generate PNG files and scroll window to save the info into those files
        for i in range(num):
            f_name = self.output_path + 'tmp_' + str(i) + '_tmp.png'
            driver.save_screenshot(f_name)
    
            image = Image.open(f_name)
            (image_width, image_height) = image.size

            driver.execute_script( 'window.scrollBy(%d,%d)' % (0, window_height) )

        ## Merge the pieces of PNG files into one
        new_image = Image.new('RGB', (image_width, scroll_height))   
        for i in range(num):
            f_name = self.output_path + 'tmp_' + str(i) + '_tmp.png'
            image = Image.open(f_name)
    
            (image_width, image_height) = image.size
            y = i * window_height

            new_image.paste(image, box=(0, y, image_width, y + image_height))

        ## Save the whole target page PNG file
        global target_page_snapshot ## this variable will be used by function "analyze" in class 
        #target_page_snapshot = self.output_path + 'target_page_' + self.current_time_formated() + '.png'
        target_page_snapshot = self.output_path + self.current_time_formated() +'_target_page' +  '.png'
        new_image.save(target_page_snapshot)
        print('Target page is dumped into file {file_name}' .format(file_name = target_page_snapshot))
        print('\n')

    def analyze(self):
        screenshot_staging = Image.open(target_page_snapshot)
        screenshot_production = Image.open(self.reference_page_snapshot)

        print('Prepare for the comparison.....')
        print('Reference : {file_name}' .format(file_name = self.reference_page_snapshot))
        print('Target    : {file_name}' .format(file_name = target_page_snapshot))
        print('\n')
        columns = 60
        rows = 80
        screen_width, screen_height = screenshot_staging.size

        block_width = ((screen_width - 1) // columns) + 1 # this is just a division ceiling
        block_height = ((screen_height - 1) // rows) + 1

        pass_fail_marker = 'pass'
        for y in range(0, screen_height, block_height+1):
            for x in range(0, screen_width, block_width+1):
                region_staging = self.process_region(screenshot_staging, x, y, block_width, block_height)
                region_production = self.process_region(screenshot_production, x, y, block_width, block_height)



                #if (region_staging is not None and region_production is not None and region_production != region_staging):
                if (region_staging is not None and region_production is not None and abs(region_production - region_staging > 2)):
                    draw = ImageDraw.Draw(screenshot_staging)
                    draw.rectangle((x, y, x+block_width, y+block_height), outline = "red")
                    pass_fail_marker = 'fail'

                    #print('debug: staging value is {num}' .format(num = region_staging))
                    #print('debug: production value is {num}' .format(num = region_production))
                    #print('###############################################')

        #diff_page_snapshot = self.output_path + 'diff_page_' + self.current_time_formated() + '.png'
        diff_page_snapshot = self.output_path + self.current_time_formated() +'_diff_page' +  '.png'
        screenshot_staging.save(diff_page_snapshot)
        
        print('Comparison is done.....')
        print('Difference : {file_name}' .format(file_name = diff_page_snapshot))
        if (pass_fail_marker == 'pass'):
            print('TESTING PASSED: No difference between Reference and Target.\n')
        else: ## fail
            print('TESTING FAILED: difference is found between Reference and Target. More details please check {f_name}\n' .format(f_name = diff_page_snapshot))

    def process_region(self, image, x, y, width, height):
        region_total = 0

        # This can be used as the sensitivity factor, the larger it is the less sensitive the comparison
        factor = 1000

        for coordinateY in range(y, y+height):
            for coordinateX in range(x, x+width):
                try:
                    pixel = image.getpixel((coordinateX, coordinateY))
                    region_total += sum(pixel)/4
                except:
                    return
        #print('debug value is {num}' .format(num = region_total/factor))
        return region_total/factor


##################################################################################
##
##  Following are for simple GUI config module to contrl scripts running
##
#################################################################################

class main_window(object):
    def __init__(self,master):
        self.master=master
        self.style = ttk.Style()
        self.style.theme_use("xpnative")
        self.style.configure('.', font=('Helvetica', 15), foreground='maroon')
        chosenFont = font.Font(family='Verdana', size=20, weight='normal')

        frame1 = Frame(self.master)
        frame1.pack()
        mLabel = Label(frame1, text = "-------------------------------------------------------------------------", font = (None, 20)).grid(row=0, column=0)
        mLabel = Label(frame1, text = "       Welcome to the regression system for Campsited page frontend functions       ", font = chosenFont).grid(row=1, column=0)
        mLabel = Label(frame1, text = "-------------------------------------------------------------------------", font = (None, 20)).grid(row=2, column=0)
    
    def user_testing_config(self, prompt, options):
        chosenFont = font.Font(family='Verdana', size=20, weight='normal')
        frame2 = Frame(self.master)
        frame2.pack()
        if prompt:
            Label(self.master, text=prompt, font = chosenFont).pack()
        global v
        v = IntVar()
        for i, option in enumerate(options):
            Radiobutton(self.master, text=option, variable=v, value=i).pack(anchor="w")
        Button(text="Submit", command=self.master.destroy).pack()
        self.master.mainloop()
        if v.get() == 0: return None
        return options[v.get()]


##################################################################################
##
##  Following are main body for scripts running
##
#################################################################################

if __name__ == '__main__':

    root = Tk()
    root.title("Main Window")
    #root.geometry("500x500")
    m_window = main_window(root)

    mode_item = m_window.user_testing_config("Please select testing mode.....",
            [
                "Initializatioin",
                "Batch Mode (Full automation based whole regression test)",
                "Graphic Mode (User manual configuration based specific test)"
            ])

    print("#################################################################")
    print("##### Testing Mode : {}".format(repr(mode_item)))
    print("#################################################################")
    print('\n')
    root.mainloop()

    if (mode_item == "Graphic Mode (User manual configuration based specific test)"):

        root = Tk()
        root.title("Main Window")
        #root.geometry("500x500")
        m_window = main_window(root)

        testing_item = m_window.user_testing_config("Please select following testing items.....",
            [
                "initialization",
                "Common_header_footer",
                "Booking from country card",
                "Booking from specific area",
                "Booking from campsite name",
                "Booking from theme card",
                "Sort_and_filter_function",
                "Page info comparison",
                "Campsite info checking"
            ])
        print("#################################################################")
        print("##### Testing item : {}".format(repr(testing_item)))
        print("#################################################################")
        print('\n')

    elif (mode_item == "Batch Mode (Full automation based whole regression test)"):
        testing_item = 'full regression'

    else:
        testing_item = 'None'

    #root.mainloop()

    ## Initialize all the variables to "False" to give a clean env 
    config_whole_env = False ## this should be set to True as usual except under some specific testing conditions (pure checking, campsite card based booking<3 tabs>, etc)
    config_click_header_button = False
    config_click_footer_button = False
    config_specific_campsite_search = False
    config_perform_booking_flow = False
    config_click_country_card = False
    config_theme_card_booking = False
    config_sort_function = False
    config_filter_function = False
    config_country_card_booking = False
    config_specific_area_booking = False
    config_enable_pure_checking = False 
    config_campsite_info_checking = False
    ##

    if (testing_item == "Common_header_footer"):
        config_whole_env = True ## ON
        config_click_header_button = True ## ON
        config_click_footer_button = True ## ON
        config_specific_campsite_search = False
        config_perform_booking_flow = False
        config_click_country_card = False
        config_theme_card_booking = False
        config_sort_function = False
        config_filter_function = False
        config_country_card_booking = False
        config_specific_area_booking = False
        config_enable_pure_checking = False
        config_campsite_info_checking = False
    elif (testing_item == "Booking from country card"):
        config_whole_env = True ## ON 
        config_click_header_button = False
        config_click_footer_button = False
        config_specific_campsite_search = False
        config_perform_booking_flow = False
        config_click_country_card = False
        config_theme_card_booking = False
        config_sort_function = False
        config_filter_function = False
        config_country_card_booking = True ## ON
        config_specific_area_booking = False
        config_enable_pure_checking = False
        config_campsite_info_checking = False
    elif (testing_item == "Booking from specific area"):
        config_whole_env = True ## ON
        config_click_header_button = False
        config_click_footer_button = False
        config_specific_campsite_search = False
        config_perform_booking_flow = False
        config_click_country_card = False
        config_theme_card_booking = False
        config_sort_function = False
        config_filter_function = False
        config_country_card_booking = False
        config_specific_area_booking = True ## ON
        config_enable_pure_checking = False 
        config_campsite_info_checking = False   
    elif (testing_item == "Booking from campsite name"):
        config_whole_env = True ## ON
        config_click_header_button = False
        config_click_footer_button = False
        config_specific_campsite_search = True ## ON
        config_perform_booking_flow = True ## ON
        config_click_country_card = False
        config_theme_card_booking = False
        config_sort_function = False
        config_filter_function = False
        config_country_card_booking = False
        config_specific_area_booking = False
        config_enable_pure_checking = False
        config_campsite_info_checking = False
    elif (testing_item == "Booking from theme card"):
        config_whole_env = True ## ON
        config_click_header_button = False
        config_click_footer_button = False
        config_specific_campsite_search = False
        config_perform_booking_flow = False
        config_click_country_card = False
        config_theme_card_booking = True ## ON
        config_sort_function = False
        config_filter_function = False
        config_country_card_booking = False
        config_specific_area_booking = False
        config_enable_pure_checking = False
        config_campsite_info_checking = False
    elif (testing_item == "Sort_and_filter_function"):
        config_whole_env = True ## ON
        config_click_header_button = False
        config_click_footer_button = False
        config_specific_campsite_search = False
        config_perform_booking_flow = False
        config_click_country_card = True ## ON
        config_theme_card_booking = False
        config_sort_function = True ## ON
        config_filter_function = True ## ON
        config_country_card_booking = False
        config_specific_area_booking = False
        config_enable_pure_checking = False
        config_campsite_info_checking = False
    elif (testing_item == "Page info comparison"):
        config_whole_env = False
        config_click_header_button = False
        config_click_footer_button = False
        config_specific_campsite_search = False
        config_perform_booking_flow = False
        config_click_country_card = False
        config_theme_card_booking = False
        config_sort_function = False
        config_filter_function = False
        config_country_card_booking = False
        config_specific_area_booking = False
        config_enable_pure_checking = True ## ON
        config_campsite_info_checking = False
    elif (testing_item == "Campsite info checking"):
        config_whole_env = True ## ON
        config_click_header_button = False
        config_click_footer_button = False
        config_specific_campsite_search = False
        config_perform_booking_flow = False
        config_click_country_card = False
        config_theme_card_booking = False
        config_sort_function = False
        config_filter_function = False
        config_country_card_booking = False
        config_specific_area_booking = False
        config_enable_pure_checking = False
        config_campsite_info_checking = True ## ON      
    elif (testing_item == "full regression"):
        config_whole_env = True ## ON
        config_click_header_button = True  ## ON
        config_click_footer_button = True ## ON
        config_specific_campsite_search = True  ## ON
        config_perform_booking_flow = True  ## ON
        config_click_country_card = True  ## ON
        config_theme_card_booking = True  ## ON
        config_sort_function = True  ## ON
        config_filter_function = True  ## ON
        config_country_card_booking = True  ## ON
        config_specific_area_booking = True ## ON
        config_enable_pure_checking = False ## turn off testing items 
        config_campsite_info_checking = False ## turn off the campsite info checking
    else:
        None
    
    
    ## Config the env
    if (config_whole_env == True):
        home_page_url = 'http://www.campsited.com'
        browser_name = 'Chrome'
    
        ## Initialize page with customerized URL and browser
        initial_page_enable = testing_config_utility(home_page_url, browser_name)
        initial_page_enable_config = initial_page_enable.web_driver_config()
    
    ## Check the button in header
    if (config_click_header_button == True):
        if (testing_item == "full regression"):
            print("#################################################################")
            print("##### Testing item : Common_header_footer")
            print("#################################################################")
            print('\n')

        initial_page_navbar = campsited_common_navbar(home_page_url, browser_name)
        page_navbar_click = initial_page_navbar.button_click()
    
    ## Check the button in footer
    if (config_click_footer_button == True):
        initial_page_footer = campsited_common_footer(home_page_url, browser_name)
        page_footer_click = initial_page_footer.button_click()
        page_social_icon_click = initial_page_footer.social_icon_click()
        time.sleep(10)
        #if (testing_item != "full regression"):
        driver.quit()

    ## Perform common search based on specific campsite
    if (config_specific_campsite_search == True):
        if (testing_item == "full regression"):
            print('\n')
            print("#################################################################")
            print("##### Testing item : Booking from campsite name")
            print("#################################################################")
            print('\n')

        campsite_name = 'Camping La Balma'
        user_check_in_date = '01/09/18'
        user_check_out_date = '03/09/18'
        print('Campsite < {name} > is seleted for booking flow testing in period between {s_date} and {e_date}.....' .format(name = campsite_name, s_date = user_check_in_date, e_date = user_check_out_date))
        
        page_common_search = campsited_common_search(home_page_url, browser_name, campsite_name, user_check_in_date, user_check_out_date )
        page_specific_campsite_search = page_common_search.specific_campsite()
    
    ## Perform 3 steps booking flow 
    if (config_perform_booking_flow == True):
        page_book_flow = page_common_search.booking_flow() ## after common search from a specific campsite
        time.sleep(10)
        #if (testing_item != "full regression"):
        driver.quit()

    ## Check theme card based booking
    if (config_theme_card_booking == True):
        if (testing_item == "full regression"):
            print("#################################################################")
            print("##### Testing item : Booking from theme card")
            print("#################################################################")
            print('\n')  

        theme_candidate_given = 18
        initial_theme_card_booking = theme_card_booking(home_page_url, browser_name, theme_candidate_given)
        specific_theme_card_booking = initial_theme_card_booking.specific_theme_card()
        driver.quit()

    if (config_specific_area_booking == True):
        area_user_given = "New Aquitaine"
        if (testing_item == "full regression"):
            print("#################################################################")
            print("##### Testing item : Booking from specific area")
            print("#################################################################")
            print('\n')
            
        print("#################################################################")
        print("##### Area : {c_name}" .format(c_name = area_user_given))
        print("#################################################################")
        print("\n")

        initial_country_card_booking = country_card_booking(home_page_url, browser_name, area_user_given, False, "No")
        run_country_card_booking = initial_country_card_booking.campsites_cards_run()


    ## Do country card (home page) + campsite card (results page) based booking
    if (config_country_card_booking == True):

        if (testing_item == "full regression"):
            country_user_given = "Austria"
            print("#################################################################")
            print("##### Testing item : Booking from country card")
            print("#################################################################")
            print('\n')
            print("#################################################################")
            print("##### Country : {c_name}" .format(c_name = country_user_given))
            print("#################################################################")
            print("\n")

        else:
            root=Tk()
            root.title("Main Window")
            #root.geometry("500x500")
            m_window=main_window(root)
            country_user_given = m_window.user_testing_config(
                "Please select following country to be tested....",
                [
                    "Initialization",
                    "Austria",
                    "Spain",
                    "France",
                    "Belgium",
                    "Germany",
                    "Italy",
                    "The Netherlands",
                    "Luxembourg"
                ]
            )

            print("#################################################################")
            print("##### Country : {}".format(repr(country_user_given)))
            print("#################################################################")
            print("\n")

        initial_country_card_booking = country_card_booking(home_page_url, browser_name, country_user_given, False, "Yes")
        run_country_card_booking = initial_country_card_booking.campsites_cards_run()

    ## Sort and filter function testing is based on following "country card clicking + sort + filter", make sure three of them are ON at the same time 
    ## Check country card
    if (config_click_country_card == True):
        country_name_given = 'Spain'
        initial_country_card_clicking = country_card_clicking(home_page_url, browser_name, country_name_given, "Yes")
        specific_country_card_click = initial_country_card_clicking.specific_country_card()
        
       ##  Switch the active window to the country related results page
        driver.switch_to.window(driver.window_handles[-1])
    
    ## Do sorting
    if (config_sort_function == True):
        if (testing_item == "full regression"):
            print("#################################################################")
            print("##### Testing item : Sort_and_filter_function")
            print("#################################################################")
            print('\n')

            sort_criteria_given = "Best reviews"
            print("#################################################################")
            print("##### Sort criteria : {s_name}" .format(s_name = sort_criteria_given))
            print("#################################################################")
            print("\n")
        else:
            root=Tk()
            root.title("Main Window")
            #root.geometry("500x500")
            m_window=main_window(root)
            sort_gui_given = m_window.user_testing_config(
                "Please select following sort criterias....",
                [
                    "Relevance",
                    "Best reviews",
                    "Price (Low to high)",
                    "Price (High to low)",
                ]
            )

            print("#################################################################")
            print("##### Sort criteria : {}".format(repr(sort_gui_given)))
            print("#################################################################")
            print("\n")

            sort_criteria_given = sort_gui_given

        time.sleep(5)
        specific_sort_function = initial_country_card_clicking.specific_sort(sort_criteria_given) ## after country card clicking
    
        ##  Switch the active window to results page with current sorting criteria
        time.sleep(5)
        driver.switch_to.window(driver.window_handles[-1])
    
    ## Do filter
    if (config_filter_function == True):
        filter_criteria_given = 'default_filter'
        print("#################################################################")
        print("##### Filter criteria : Pitch + 2 stars + 3 stars + 4 stars")
        print("#################################################################")
        print("\n")

        time.sleep(5)
        specific_filter_function = initial_country_card_clicking.specific_filter(filter_criteria_given) ## after country card clicking
        
        ##  Switch the active window to results page with current filter criteria
        driver.switch_to.window(driver.window_handles[-1])

        time.sleep(10)
        url_filter = driver.current_url ## save current URL into variable for the next testing comparison purpose
        driver.quit()
        ## dump file for comparison
        reference_page_given = r'D:\Project\campsited\regression\camprison\target\\2018_08_30_14_27_04_target_page.png'
        #output_path_given = r'C:\Users\yanhui\Python\python3\Campsited\reference file\try\\'
        output_path_given = r'D:\Project\campsited\regression\camprison\target\\'
    
        initial_screen_analysis = screen_analysis(browser_name, url_filter, reference_page_given, output_path_given)
        config_screen_analysis = initial_screen_analysis.web_driver_config()
        dump_page_snapshot = initial_screen_analysis.whole_page_snapshot()
        analysis_page_snapshot = initial_screen_analysis.analyze()
        driver.quit()

        ## Check theme card based booking
    #if (config_theme_card_booking == True):
    #    theme_candidate_given = 16
    #    initial_theme_card_booking = theme_card_booking(home_page_url, browser_name, theme_candidate_given)
    #    specific_theme_card_booking = initial_theme_card_booking.specific_theme_card()
        

    
    ## Fore pure screen analysis based checking (no other actions)
    if (config_enable_pure_checking == True):
        
        #home_page_url = 'https://www.campsited.com/campsites_search/results?csf%5Bquery%5D=Spain'
        #home_page_url = 'https://www.campsited.com/'
        #home_page_url = 'https://www.campsited.com/campsites/5182/accommodations/1625/secureholiday_bookings/options?create_booking_form%5Badults%5D=2&create_booking_form%5Bfrom%5D=10%2F09%2F2018&create_booking_form%5Bsecureholiday_spec%5D=MjFAMjFAQEAwQDVATUBAQEAxMzBAMEAwQDJAMkA2QEBAQEBA&create_booking_form%5Bsecureholiday_tac%5D=Nzc3MDZAcEAxMC8wOS8yMDE4QDExLzA5LzIwMThANzc3MDZAQDIyNzU0OA%3D%3D&create_booking_form%5Bto%5D=11%2F09%2F2018'
        home_page_url = 'https://www.campsited.com/camping/france/camping-sites-et-paysages-le-panoramic?csf%5Bquery%5D=France'
        browser_name = 'Chrome'
        #reference_page_given = r'C:\Users\yanhui\Python\python3\Campsited\reference file\try\whole_page.png' 
        #output_path_given = r'C:\Users\yanhui\Python\python3\Campsited\reference file\try\\'

        reference_page_given = r'D:\Project\campsited\regression\camprison\target\\2018_08_30_14_28_51_target_page.png'
        output_path_given = r'D:\Project\campsited\regression\camprison\target\\'
    
        initial_screen_analysis = screen_analysis(browser_name, home_page_url, reference_page_given, output_path_given)
        config_screen_analysis = initial_screen_analysis.web_driver_config()

        dump_page_snapshot = initial_screen_analysis.whole_page_snapshot()
        analysis_page_snapshot = initial_screen_analysis.analyze()

        driver.quit()

    ## Enable campsite info dump
    if (config_campsite_info_checking == True):
        #initial_country_based_campsite_info_checking = country_based_campsite_info_checking(home_page_url, browser_name, 'Spain', "Yes")
        initial_country_based_campsite_info_checking = country_based_campsite_info_checking(home_page_url, browser_name, 'Spain', "Yes")
        country_info_check = initial_country_based_campsite_info_checking.country_check()
        dump_campsite_info = initial_country_based_campsite_info_checking.price_dump()
        print_info_check = initial_country_based_campsite_info_checking.price_check()
        #country_info_check = initial_country_based_campsite_info_checking.country_check()





